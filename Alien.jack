class Alien {
    field int x,y;
    static boolean direction;

    constructor Alien new(int ax,int ay){
        let x = ax;
        let y = ay;
        let direction = true;

        return this;
    }

    method void dispose(){
        do erase();
        do Memory.deAlloc(this);
        return;
    }

    method boolean check(){
    var boolean lastdir;
    let lastdir = direction;
        if(x+40>512){
            let direction = false;
        }
        if (x-40<0){
            let direction = true;
        }
    if(~(lastdir=direction)){
        return true;
    }
        return false;
    }

    method void updateX(){
        if(direction){
            let x = x+20;
        }
        else {
            let x = x-20;
        }
        return;
    }

    method void moveDown(){
        let y = y + 20;
        return;
    }


    method void draw(){
        var int memAddress; 
        let memAddress = 16384+ (y*32)+ (x/20);
       // column 0
        do Memory.poke(memAddress +64, 8196);
        do Memory.poke(memAddress +32, 0);
        do Memory.poke(memAddress +96, 4104);
        do Memory.poke(memAddress +128, 2064);
        do Memory.poke(memAddress +160, 16380);
        do Memory.poke(memAddress +192, 32766);
        do Memory.poke(memAddress +224, -6169);
        do Memory.poke(memAddress +256, -6169);
        do Memory.poke(memAddress +288, -1);
        do Memory.poke(memAddress +320, -1);
        do Memory.poke(memAddress +352, -1);
        do Memory.poke(memAddress +384, -18403);
        do Memory.poke(memAddress +416, -18403);
        do Memory.poke(memAddress +448, 7800);
        do Memory.poke(memAddress +480, 3696);
        return;
    }

    method void erase(){
        var int memAddress; 
        let memAddress = 16384+ (y*32) + (x/20);
       // column 0
        do Memory.poke(memAddress +64, 0);
        do Memory.poke(memAddress +32, 0);
        do Memory.poke(memAddress +96, 0);
        do Memory.poke(memAddress +128, 0);
        do Memory.poke(memAddress +160, 0);
        do Memory.poke(memAddress +192, 0);
        do Memory.poke(memAddress +224, 0);
        do Memory.poke(memAddress +256, 0);
        do Memory.poke(memAddress +288, 0);
        do Memory.poke(memAddress +320, 0);
        do Memory.poke(memAddress +352, 0);
        do Memory.poke(memAddress +384, 0);
        do Memory.poke(memAddress +416, 0);
        do Memory.poke(memAddress +448, 0);
        do Memory.poke(memAddress +480, 0);
        return;
    }

     method int getX(){
        return x;
    }

    method boolean checkCol(int playerY){
        if(y>playerY){
            return true;
        }
        return false;
    }
}
